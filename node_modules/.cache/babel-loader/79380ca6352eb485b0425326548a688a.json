{"ast":null,"code":"var _jsxFileName = \"/Users/liubomyravramets/Desktop/test/src/App.js\";\nimport React, { useState } from 'react';\nimport { Route, NavLink } from 'react-router-dom';\nimport './App.css';\nimport _ from 'lodash';\nimport FilmsList from './components/FilmsList';\nconst FilmUrl = 'https://swapi.co/api/films/';\n\nconst App = () => {\n  const [listOfFilms, setListOfFilms] = useState([]);\n  const [title, setTitle] = useState(''); // const match = useRouteMatch();\n\n  const getFilmFromServer = async () => {\n    const response = await fetch(`${FilmUrl}`);\n    return response.json();\n  };\n\n  const setQueryWithDebounce = _.debounce(query => {\n    setTitle(query);\n  }, 1000);\n\n  const loadFilms = async () => setListOfFilms((await getFilmFromServer()).results);\n\n  const sortByName = () => setListOfFilms(prevState => [...prevState].sort((a, b) => a.title.localeCompare(b.title)));\n\n  const sortByEpisod = () => setListOfFilms(prevState => [...prevState].sort((a, b) => b.episode_id - a.episode_id));\n\n  const findPost = () => listOfFilms.filter(item => item.title.includes(title));\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"image\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), React.createElement(\"h1\", {\n    className: \"App__header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Star Wars Films\"), React.createElement(NavLink, {\n    to: \"/films\",\n    onClick: loadFilms,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"Show films\"), listOfFilms.length !== 0 && React.createElement(React.Fragment, null, React.createElement(\"input\", {\n    placeholder: \"Search...\",\n    onChange: event => setQueryWithDebounce(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    onClick: sortByName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"sortByName\"), React.createElement(\"button\", {\n    type: \"button\",\n    onClick: sortByEpisod,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"sortByEpisod\"), React.createElement(Route, {\n    path: \"/films/:id?\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(FilmsList, {\n    listOfFilms: findPost(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }))));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/liubomyravramets/Desktop/test/src/App.js"],"names":["React","useState","Route","NavLink","_","FilmsList","FilmUrl","App","listOfFilms","setListOfFilms","title","setTitle","getFilmFromServer","response","fetch","json","setQueryWithDebounce","debounce","query","loadFilms","results","sortByName","prevState","sort","a","b","localeCompare","sortByEpisod","episode_id","findPost","filter","item","includes","length","event","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Route, NavLink } from 'react-router-dom';\nimport './App.css';\nimport _ from 'lodash';\nimport FilmsList from './components/FilmsList';\n\nconst FilmUrl = 'https://swapi.co/api/films/';\n\nconst App = () => {\n  const [listOfFilms, setListOfFilms] = useState([]);\n  const [title, setTitle] = useState('');\n  // const match = useRouteMatch();\n\n  const getFilmFromServer = async() => {\n    const response = await fetch(`${FilmUrl}`);\n\n    return response.json();\n  };\n\n  const setQueryWithDebounce = _.debounce((query) => {\n    setTitle(query);\n  }, 1000);\n\n  const loadFilms = async() => (\n    setListOfFilms((await getFilmFromServer()).results)\n  );\n\n  const sortByName = () => setListOfFilms(prevState => (\n    [...prevState].sort((a, b) => a.title.localeCompare(b.title))));\n\n  const sortByEpisod = () => setListOfFilms(prevState => (\n    [...prevState].sort((a, b) => b.episode_id - a.episode_id)));\n\n  const findPost = () => listOfFilms.filter(item => item.title.includes(title));\n\n  return (\n    <div className=\"App\" align=\"center\">\n      <div className=\"image\" />\n      <h1 className=\"App__header\">Star Wars Films</h1>\n      <NavLink to=\"/films\" onClick={loadFilms}>\n        Show films\n      </NavLink>\n      {listOfFilms.length !== 0\n        && (\n          <>\n            <input\n              placeholder=\"Search...\"\n              onChange={event => setQueryWithDebounce(event.target.value)}\n            />\n            <button type=\"button\" onClick={sortByName}>sortByName</button>\n            <button type=\"button\" onClick={sortByEpisod}>sortByEpisod</button>\n\n            <Route path=\"/films/:id?\">\n              <FilmsList listOfFilms={findPost()} />\n            </Route>\n            {/* {console.log(match.params.id)} */}\n          </>\n        )\n      }\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}